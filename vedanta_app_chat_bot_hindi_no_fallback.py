import streamlit as st
from langchain.vectorstores import FAISS
from langchain_community.embeddings import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.text_splitter import CharacterTextSplitter
from langchain.document_loaders import TextLoader
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
import os

# Set your OpenAI API key
openai_key = st.secrets["OPENAI_API_KEY"]

# Hindi prompt template to avoid fallback
custom_prompt = PromptTemplate(
    input_variables=["context", "question"],
    template="""
    ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§ ‡§Ö‡§ó‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§ï‡§π‡•á‡§Ç "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§"

    ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠: {context}
    ‡§™‡•ç‡§∞‡§∂‡•ç‡§®: {question}
    ‡§â‡§§‡•ç‡§§‡§∞:
    """
)

# Load Hindi documents
@st.cache_resource
def load_vector_store():
    embeddings = OpenAIEmbeddings(openai_api_key=openai_key)
    vectordb = FAISS.load_local(
        "vedanta_vectorstore",
        embeddings,
        allow_dangerous_deserialization=True)
    return vectordb

vectordb = load_vector_store()

# Chat model (set to Hindi)
llm = ChatOpenAI(temperature=0, model_name="gpt-3.5-turbo")

# Custom QA chain with fallback prevention
def get_hindi_answer(query):
    docs = vectordb.similarity_search(query, k=3)
    if not docs:
        return "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§"

    context = "\n\n".join([doc.page_content for doc in docs])
    prompt = custom_prompt.format(context=context, question=query)
    response = llm.predict(prompt)
    return response

# Streamlit UI
st.title("üïâÔ∏è ‡§µ‡•á‡§¶‡§æ‡§Ç‡§§ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ö‡•à‡§ü‡§¨‡•â‡§ü")

user_question = st.text_input("‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç:")

if user_question:
    with st.spinner("‡§â‡§§‡•ç‡§§‡§∞ ‡§ñ‡•ã‡§ú‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à..."):
        answer = get_hindi_answer(user_question)
        st.write("**‡§â‡§§‡•ç‡§§‡§∞:**")
        st.success(answer)
