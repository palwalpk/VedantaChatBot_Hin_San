import streamlit as st
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
import os
#URL used in Steamlit clound
#https://vedantachatbothindi.streamlit.app/
# Load OpenAI key from secrets
openai_key = st.secrets["OPENAI_API_KEY"]

# Set up Streamlit
st.set_page_config(page_title="Vedanta GPT", page_icon="ЁЯзШтАНтЩВя╕П")
st.title("ЁЯзШтАНтЩВя╕П рд╡реЗрджрд╛рдВрдд GPT (Vedanta Chatbot)")
st.write("рд╣рд┐рдВрджреА рдореЗрдВ рдЕрдкрдиреЗ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ рдФрд░ рд╡реЗрджрд╛рдВрдд рд╢рд╛рд╕реНрддреНрд░ рд╕реЗ рдЙрддреНрддрд░ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред")

# Load Vector Store
@st.cache_resource
def load_chain():
    embeddings = OpenAIEmbeddings(openai_api_key=openai_key)
    vectordb = FAISS.load_local(
        "vedanta_vectorstore",
        embeddings,
        allow_dangerous_deserialization=True
    )
    prompt = PromptTemplate(
        input_variables=["context", "question"],
        template=(
            "рддреБрдо рд╡реЗрджрд╛рдВрдд рдХреЗ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реЛред рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рдВрджрд░реНрдн рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рджреЛ:\n\n"
            "рд╕рдВрджрд░реНрдн:\n{context}\n\n"
            "рдкреНрд░рд╢реНрди: {question}"
        )
    )
    qa_chain = RetrievalQA.from_chain_type(
        llm=ChatOpenAI(model="gpt-4", openai_api_key=openai_key),
        retriever=vectordb.as_retriever(),
        chain_type="stuff",
        chain_type_kwargs={"prompt": prompt}
    )
    return qa_chain

qa_chain = load_chain()

# Chat UI
query = st.text_input("ЁЯФН рдкреНрд░рд╢реНрди рджрд░реНрдЬ рдХрд░реЗрдВ:")
#if st.button("рдЙрддреНрддрд░ рджреЗрдВ") and query:
if query:
    with st.spinner("рд╕реЛрдЪ рд░рд╣реЗ рд╣реИрдВ..."):
        result = qa_chain.run(query)
        st.markdown("### ЁЯза рдЙрддреНрддрд░:")
        st.write(result)